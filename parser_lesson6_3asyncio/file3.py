'''
Данная функция проводит сортировку по возрастанию
Аргументом <p> должен быть итерируемый изменяемый объект: list
Объекты в коллекции должны допускать сравнение между собой (например int и float)
Функция будет изменять переданный ей аргумент <p>
'''


def do_something(p):  # объявление функции <do_something>, принимающий аргумент <p>
    l = len(p)  # переменная <l> принимает значение длинны аргумента <p>, ее значение будет типа <int>
    for i in range(1, l):
        # создаем цикл, где переменная <i> типа <int> будет принимать значения от <1> до <l-1> включительно
        k = p[i]
        # присваиваем переменной <k> значение объекта, стоящего на <i>-м месте, начиная с 0, в изменяемой коллекции <p>
        # что бы не потерять его значение
        # в этом цикле начинаем перебор значений <p>, начиная со второго до последнего
        j = i - 1
        # присваиваем переменной <j> значение <i>-1 (это порядковый номер предыдущего от i-го элемента)
        while j >= 0 and k < p[j]:  # условие цикла: пока j >= 0 and k < p[j]
            # j >= 0 потому, что сравнение идет до первого (0-го) элемента
            # k < p[j] это сортировка по возрастанию, поэтому проверяем,
            # что бы сравниваемый элемент был меньше предыдущего
            p[j + 1] = p[j]  # при выполнении условия на место p[j + 1] присваиваем значение предыдущего элемента p[j]
            j -= 1  # уменьшаем значение j, пока не дойдем до 0 и закончим цикл, при условии k < p[j]
            print(p)
        p[j + 1] = k  # возвращаем значение <k> в элемент p[j + 1]


# Так пройдем по всем объектам списка, начиная со второго, и если в текущей позиции будет значение больше предыдущего
# то они поменяются
# это вариант метода пузырьков

if __name__ == '__main__':
    p = [5, 4, 3, 2, 1]

    print(do_something(p=p))

    print(p)
